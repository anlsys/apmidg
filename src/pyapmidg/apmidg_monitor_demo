#!/usr/bin/env python3

import time, sys, os
import re, getopt
from subprocess import Popen, PIPE, STDOUT

import pyapmidg
import clr_rapl
import keypress
import platform

enable_keypress = True

# define ipmi sensor ids here
#ipmisensorids = '22,23'
ipmisensorids = '27,29,31'

enabled_boardpower = True

def read_boardpower_arcticus():
    nerr = 0
    watt = 0
    p = Popen('sudo ipmi-sensors --comma-separated-output -r %s'%ipmisensorids, stdout = PIPE, stderr = STDOUT, shell = True)
    for l in p.stdout:
        res = l.decode().split(',')
        if len(res) > 5:
            if (res[1].find('Input Power') > 0) :
                if res[3] == "N/A":
                    if nerr == 0:
                        print('Warning: disabled the boardpower reading', res[3])
                        nerr += 1
                    enabled_boardpower = False
                else:
                    watt = watt + float(res[3])
                    enabled_boardpower = True

    return watt

def set_and_monitor(pm, ndevs, fn, powercap_W=0, maxreq_MHz=0.0, timeout_sec=0, delay_sec=0.5, cmdargs = []):
    print("")
    print("Test monitoring")

    rr = clr_rapl.rapl_reader()

    if enable_keypress:
        kp = keypress.keypress()
        kp.enable()

    devnpwrdoms = []
    devnfreqdoms = []
    devntempsensors = []
    for devid in range(0, ndevs):
        devnpwrdoms.append(pm.getnpwrdoms(devid))
        devnfreqdoms.append(pm.getnfreqdoms(devid))
        devntempsensors.append(pm.getntempsensors(devid))

    for devid in range(0, ndevs):
        for pwrid in range(0, devnpwrdoms[devid]):
            if (powercap_W > 0):
                pm.setpwrlim(devid, pwrid, powercap_W*1000)
        for freqid in range(0, devnfreqdoms[devid]):
            if (maxreq_MHz > 0.0):
                flims = pm.getfreqlims(devid, freqid)
                flims.max_MHz = maxreq_MHz
                print(flims.max_MHz, flims.min_MHz)
                pm.setfreqlims(devid, freqid, flims.min_MHz, flims.max_MHz)

#    childpid = 0
#    if len(cmdargs)>0:
#        pid = os.fork()
#        if pid == 0:
#            ret = os.system(' '.join(cmdargs))
#            sys.exit(ret)
#        else:
#            childpid = pid

    read_boardpower_arcticus() # the first read may take time

    starttime = time.time()
    with open(fn, 'w') as f:
        f.write('# powercap_watt=%d\n'%powercap_watt)
        f.write('# freqcap_mhz=%d\n'%freqcap_mhz)

        while True:
            # read all sensors
            readoutstartt = time.time()
            for devid in range(0, ndevs):
                curt = time.time()
                s = "%lf %lf GPU%d  " % (curt, curt - starttime, devid)

                for pwrid in range(0, devnpwrdoms[devid]):
                    pprops = pm.getpwrprops(devid, pwrid)

                    if pprops.canctrl > 0:
                        plim = pm.getpwrlim(devid, pwrid)/1000.
                        s += "%.1lf " % plim
                    else :
                        s += "NA   "

                    ptmp = pm.readpoweravg(devid, pwrid)
                    s += "%.1lf " % ptmp
                s += " "
                if True: # read Freq.
                    for freqid in range(0, devnfreqdoms[devid]):
                        flims = pm.getfreqlims(devid, freqid)
                        s += "%d " % (int(flims.max_MHz))
                        ftmp = pm.readfreq(devid, freqid)
                        s += "%d " % int(ftmp)
                        s += " "
                if True: # read temp.
                    for tempid in range(0, devntempsensors[devid]):
                        ttmp = pm.readtemp(devid, tempid)
                        s += "%.1lf " % ttmp
                s += "   "
                f.write(s + "\n")
                print(s)
            # RAPL
            curt = time.time()
            s = "%lf %lf CPU   " % (curt, curt - starttime)
            s += "%.1lf" % rr.sample()['power']['total']
            f.write(s + "\n")
            print(s)
            # IPMI
            if enabled_boardpower:
                curt = time.time()
                s = "%lf %lf BOARD " % (curt, curt - starttime)
                s += "%.1lf" % read_boardpower_arcticus()
                f.write(s + "\n")
                print(s)
            #
            if timeout_sec > 0:
                if curt - starttime > timeout_sec:
                    break
            if enable_keypress and kp.readkey() == 'q':
                break
            readoutendt = time.time()
            sleeptime = delay_sec - (readoutendt-readoutstartt)
            if sleeptime < 0.0:
                sleeptime = 0.0
                print("Warning: sleeptime became negative. reset to zero")
            time.sleep(sleeptime)
    if enable_keypress:
        kp.disable()


def usage():
    print('demo_monitor [options] command args')
    print()
    print('-t timeout : timeout in second, otherwise no timeout')
    print('-r [01]    : reset after the monitor loop. 1 to enable and 0 to diable')
    print('-o outfn   : output filename')
    print('-p int     : power capping value in Watt. no power capping by default')
    print('-f int     : frequency capping value in MHz. no frequency capping by default')
    print('-d float   : measurement dealy in sec. default: 0.5 second')
    print()


if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'ht:r:o:p:f:d:', [])
    except getopt.GetoptError as err:
        print(err)
        usage()
        sys.exit(1)



    # default values
    delay_sec = 1
    timeout_sec = 0
    powercap_watt = 0
    freqcap_mhz = 0
    reset_setting = True
    outfn = 'apmidg_monitor.txt'

    for o, a in opts:
        if o in ('-h'):
            usage()
            sys.exit(0)
        elif o in ('-t'):
            timeout_sec = int(a)
        elif o in ('-p'):
            powercap_watt = int(a)
        elif o in ('-f'):
            freqcap_mhz = int(a)
        elif o in ('-r'):
            reset_setting = int(a) == 1
        elif o in ('-o'):
            outfn = a
        elif o in ('-d'):
            delay_sec = float(a)
        else:
            break

    print('[demo_monitor]')
    print('reset_setting: ', reset_setting)
    print('delay_sec:     ', delay_sec)
    print('timeout_sec:   ', timeout_sec)
    print('powercap_watt: ', powercap_watt)
    print('freqcap_mhz:   ', freqcap_mhz)
    print('outfn:         ', outfn)
    args = []  # disable the feature for now
    if len(args) > 0:
        print('cmdargs:       ', args)
    print('')

    verbose = 1
    pm = pyapmidg.clr_apmidg(verbose)
    ndevs = pm.getndevs()

    set_and_monitor(pm, ndevs, outfn, powercap_watt, freqcap_mhz, timeout_sec, delay_sec, args)

    if reset_setting:
        print("reset setting")
        pm.reset2default()

    print("done")
